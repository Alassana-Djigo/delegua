export interface ResolvedorInterface {
    interpretador: any;
    Delegua: any;
    escopos: any;
    FuncaoAtual: any;
    ClasseAtual: any;
    cicloAtual: any;

    definir(nome: any): void;
    declarar(nome: any): void;
    inicioDoEscopo(): void;
    finalDoEscopo(): void;
    resolver(declaracoes: any): void;
    resolverLocal(expr: any, nome: any): void;
    visitBlockStmt(stmt: any): any;
    visitVariableExpr(expr: any): any;
    visitVarStmt(stmt: any): any;
    visitAssignExpr(expr: any): any;
    resolverFuncao(funcao: any, funcType: any): void;
    visitFunctionStmt(stmt: any): any;
    visitFunctionExpr(stmt: any): any;
    visitTryStmt(stmt: any): any;
    visitClassStmt(stmt: any): any;
    visitSuperExpr(expr: any): any;
    visitGetExpr(expr: any): any;
    visitExpressionStmt(stmt: any): any;
    visitIfStmt(stmt: any): any;
    visitImportStmt(stmt: any): void;
    visitPrintStmt(stmt: any): void;
    visitReturnStmt(stmt: any): any;
    visitSwitchStmt(stmt: any): void;
    visitWhileStmt(stmt: any): any;
    visitForStmt(stmt: any): any;
    visitDoStmt(stmt: any): any;
    visitBinaryExpr(expr: any): any;
    visitCallExpr(expr: any): any;
    visitGroupingExpr(expr: any): any;
    visitDictionaryExpr(expr: any): any;
    visitArrayExpr(expr: any): any;
    visitSubscriptExpr(expr: any): any;
    visitContinueStmt(stmt?: any): any;
    visitBreakStmt(stmt?: any): any;
    visitAssignsubscriptExpr(expr?: any): any;
    visitLiteralExpr(expr?: any): any;
    visitLogicalExpr(expr?: any): any;
    visitUnaryExpr(expr?: any): any;
    visitSetExpr(expr?: any): any;
    visitThisExpr(expr?: any): any;
}