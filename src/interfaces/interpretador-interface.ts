export interface InterpretadorInterface {
    Delegua: any;
    diretorioBase: any;
    global: any;
    ambiente: any;
    locais: any;

    resolver(expr: any, depth: any): void;
    visitarExpressaoLiteral(expr: any): any;
    avaliar(expr: any): any;
    visitarExpressaoAgrupamento(expr: any): any;
    eVerdadeiro(objeto: any): boolean;
    verificarOperandoNumero(operador: any, operand: any): void;
    visitarExpressaoUnaria(expr: any): any;
    eIgual(esquerda: any, direita: any): any;
    verificarOperandosNumeros(operador: any, direita: any, esquerda: any): void;
    visitarExpressaoBinaria(expr: any): any;
    visitarExpressaoDeChamada(expr: any): any;
    visitarExpressaoDeAtribuicao(expr: any): any;
    procurarVariavel(nome: any, expr: any): any;
    visitarExpressaoDeVariavel(expr: any): any;
    visitarDeclaracaoDeExpressao(stmt: any): any;
    visitarExpressaoLogica(expr: any): any;
    visitarExpressaoSe(stmt: any): any;
    visitarExpressaoPara(stmt: any): any;
    visitarExpressaoFazer(stmt: any): any;
    visitarExpressaoEscolha(stmt: any): any;
    visitarExpressaoTente(stmt: any): any;
    visitarExpressaoEnquanto(stmt: any): any;
    visitarExpressaoImportar(stmt: any): any;
    visitarExpressaoEscreva(stmt: any): any;
    executarBloco(declaracoes: any, ambiente: any): void;
    visitarExpressaoBloco(stmt: any): null;
    visitarExpressaoVar(stmt: any): null;
    visitarExpressaoContinua(stmt?: any): void;
    visitarExpressaoPausa(stmt?: any): void;
    visitarExpressaoRetornar(stmt: any): void;
    visitarExpressaoDeleguaFuncao(expr: any): any;
    visitarExpressaoAtribuicaoSobrescrita(expr: any): void;
    visitarExpressaoVetorIndice(expressao: any): any;
    visitarExpressaoDefinir(expr: any): any;
    visitarExpressaoFuncao(stmt: any): any;
    visitarExpressaoClasse(stmt: any): any;
    visitarExpressaoObter(expr: any): any;
    visitarExpressaoIsto(expr: any): any;
    visitarExpressaoDicionario(expr: any): any;
    visitarExpressaoVetor(expr: any): any;
    visitarExpressaoSuper(expr: any): any;
    paraTexto(objeto: any): any;
    executar(stmt: any, mostrarResultado: boolean): void;
    interpretar(declaracoes: any): void;
}