export interface InterpretadorInterface {
    Delegua: any;
    diretorioBase: any;
    global: any;
    ambiente: any;
    locais: any;

    resolver(expr: any, depth: any): void;
    visitLiteralExpr(expr: any): any;
    avaliar(expr: any): any;
    visitGroupingExpr(expr: any): any;
    eVerdadeiro(objeto: any): boolean;
    checkNumberOperand(operador: any, operand: any): void;
    visitUnaryExpr(expr: any): any;
    eIgual(esquerda: any, direita: any): any;
    checkNumberOperands(operador: any, direita: any, esquerda: any): void;
    visitBinaryExpr(expr: any): any;
    visitCallExpr(expr: any): any;
    visitAssignExpr(expr: any): any;
    procurarVariavel(nome: any, expr: any): any;
    visitVariableExpr(expr: any): any;
    visitExpressionStmt(stmt: any): any;
    visitLogicalExpr(expr: any): any;
    visitIfStmt(stmt: any): any;
    visitForStmt(stmt: any): any;
    visitDoStmt(stmt: any): any;
    visitSwitchStmt(stmt: any): any;
    visitTryStmt(stmt: any): any;
    visitWhileStmt(stmt: any): any;
    visitImportStmt(stmt: any): any;
    visitPrintStmt(stmt: any): any;
    executeBlock(declaracoes: any, ambiente: any): void;
    visitBlockStmt(stmt: any): null;
    visitVarStmt(stmt: any): null;
    visitContinueStmt(stmt?: any): void;
    visitBreakStmt(stmt?: any): void;
    visitReturnStmt(stmt: any): void;
    visitFunctionExpr(expr: any): any;
    visitAssignSubscriptExpr(expr: any): void;
    visitSubscriptExpr(expressao: any): any;
    visitSetExpr(expr: any): any;
    visitFunctionStmt(stmt: any): any;
    visitClassStmt(stmt: any): any;
    visitGetExpr(expr: any): any;
    visitThisExpr(expr: any): any;
    visitDictionaryExpr(expr: any): any;
    visitArrayExpr(expr: any): any;
    visitSuperExpr(expr: any): any;
    stringify(objeto: any): any;
    executar(stmt: any, imprimirResultado: boolean): void;
    interpretar(declaracoes: any): void;
}